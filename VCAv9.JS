/*

Copyright Â© 2016

 ----------    -----------
|               |           |
|               |           |
|------- --|           |
|            \             |
|              \    -----

JavaScript made by RJxMoDz

*/

var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();

var Button = android.widget.Button;

var LinearLayout = android.widget.LinearLayout;

var RelativeLayout = android.widget.RelativeLayout;

var PopupWindow = android.widget.PopupWindow;

var ScrollView = android.widget.ScrollView;

var TextView = android.widget.TextView;

var Switch = android.widget.Switch;

var Toast = android.widget.Toast;

var Runnable = java.lang.Runnable;

var View = android.view.View;

var ColorDrawable = android.graphics.drawable.ColorDrawable;

var Color = android.graphics.Color;

var Gravity = android.view.Gravity;

var Intent = android.content.Intent;

var Uri = android.net.Uri;

var Dialog = android.app.Dialog;

var ProgressBar = android.widget.ProgressBar;

var sdcard = new android.os.Environment.getExternalStorageDirectory();

var path = sdcard + "/games/com.mojang/minecraftpe"

var PathPix = "/games/com.mojang/minecraftpe"

var GUI;

var background;

var menu;

var menu1;

var menu2;

var menu3;

var menu4;

var exitUI;

var exitUI1;

var exitUI2;

var exitUI3;

var exitUI4;

var customcolor = new android.graphics.BitmapFactory.decodeFile("mnt/sdcard/games/");

var customcolorI = new android.graphics.drawable.BitmapDrawable(customcolor);

var VCAv9BackgroundZ = new android.graphics.BitmapFactory.decodeFile(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + PathPix + "/VCAv9Background.PNG");

var VCAv9Background = new android.graphics.drawable.BitmapDrawable(VCAv9BackgroundZ);

var NAME = "VCA";

var split = " ";

var version = "1.5.1 Beta";

var VERSION2 = "v9";

var VCAv9 = {};

var defaultDestroyTime = [

null, 1.5, 0.6, 0.5, 2, 2, 0, -1, null, null, null, null, 0.5, 0.6, 3, 3, 3, 2, 

0.2, 0.6, 0.3, 3, 3, null, 0.8, null, 0.2, 0.7, null, null, 4, 0, 0, null, null, 

0.8, null, 0, 0, 0, 0, 3, 5, 2, 2, 2, 0, 1.5, 2, 50, 0, 0, null, 2, 2.5, null, 

3, 5, 2.5, 0, 0.6, 3.5, 3.5, 1, 3, 0.4, 0.7, 2, 1, null, null, 5, null, 3, 3, 

null, null, null, 0.1, 0.5, 0.2, 0.4, 0.6, 0, null, 2, 1, 0.4, 0.3, null, 1, 0.5, 

null, null, -1, 3, null, 1.5, null, null, 5, 0.3, 1, 0, 0, null, 2, 2, 1.5, null, 

null, 2, null, 2, null, null, null, null, null, null, null, null, null, null, null, 

null, null, 0.8, null, null, null, null, null, 2, 2, 2, null, null, 2, null, 0, 0, 

null, null, null, null, null, null, null, null, null, null, null, null, 0.8, 0.8, 

2, 2, null, null, null, null, null, null, null, null, null, null, null, 0.5, 0.1, 

5, null, null, null, null, null, null, null, null, null, null, null, null, null, 

null, null, null, null, null, null, null, null, null, null, null, null, null, null,

null, null, null, null, null, null, null, null, null, null, null, null, null, null,

null, null, null, null, null, null, null, null, null, null, null, null, null, null,

null, null, null, null, null, null, null, null, null, null, null, null, null, null,

null, 0, 3.5, 50, 5, 0.6, 0.6, 5, null, null, null, null, 0

];

var playerDir = [0, 0, 0];

var DEG_TO_RAD = Math.PI / 180;

var playerFlySpeed = 1;

var falling = 0;

var next = 0;

var px, py, pz, lx, ly, lz, vel, saver;

var cd = 0;

var s = 0;

var Xdiff;

var Zdiff;

var Xpos;

var Zpos;

var can = 1;

var canGetHP = 1;

var HP;

var gravity = -0.07840000092983246;

var Entities = [];

var counter = 0;

var topBlocks = [];

var bottomBlocks = [];

var gameX, gameY, gameZ;

var gameProgress = 0;

var gameStarted = 0;

var count = 0;

var countDown = 0;

var aig = 0;

var betterGrass = "fast";

var optich = true;

var opti;

var backch = true;

var back;

var uidebugch = false;

var uidebug;

var speedminech = false;

var speedmine;

var superspeedmine = false;

var godmodech = false;

var godmode;

var supergodmode = false;

var fovch = false;

var fov;

var flightch = false;

var flight;

var removech = false;

var remove;

var allremove = false;

var stoptimech = false;

var stop;

var stoptime = false;

var instakillch = false;

var instakill;

var instakilled = false;

var saddleupch = false;

var saddleup;

var saddle = false;

var knockbackch = false;

var knockback;

var knockbacks = false;

var tapspamch = false;

var tapspam;

var spammer = false;

var jetpackch = false;

var jetpack;

var jetpacked = false;

var alltpch = false;

var alltp;

var alltps = false;

var nukerch = false;

var nuker;

var nukers = false;

var cbuildch = false;

var cbuild;

var cbuilder = false;

var speedch = false;

var speed;

var speeded = false;

var stackdrch = false;

var stackdr;

var stacked = false;

var highjumpch = false;

var highjump;

var highjumps = false;

var freezech = false;

var freeze;

var freezeaura = false;

var coordch = false;

var coord;

var coords = false;

var derpch = false;

var derp;

var derps = false;

var killch = false;

var kill;

var killaura = false;

var gmspeedch = false;

var gmspeed;

var zoomch = false;

var zoom;

var jesusch = false;

var jesus;

var waterwalk = false;

var nowallch = false;

var nowall;

var nowalls = false;

var invscrch = false;

var invscr;

var climbch = false;

var climb;

var climbs = false;

var GetLang = ModPE.getLanguage();

var checkForUpdate = false;

var updateWindow = false;

var newUpdate;

var updateMod;

var inGame = false;

VCAv9.playerIsInGame = false;

VCAv9.setupTheme = function(){

		ModPE.overrideTexture("images/font/default8.png","https://dl.dropboxusercontent.com/s/u5shz9f7v3mhapj/default.png");

		ModPE.overrideTexture("images/gui/spritesheet.png","http://i.imgur.com/BCA6vgv.png");

		ModPE.overrideTexture("images/gui/touchgui.png","http://i.imgur.com/dY3c1Jl.png");

}

VCAv9.setupTheme();

  var createUiThread = function(func){

     getContext().runOnUiThread(new java.lang.Runnable({

        run: function(){

            func(getContext());

        }

    }));

};

VCAv9.initializeOptiFine = function(){

    if(betterGrass == "off"){

        Block.defineBlock(2, "OptiFine", [
            ["dirt", 0],
            ["grass", 2],
            ["grass", 3],
            ["grass", 3],
            ["grass", 3],
            ["grass", 3]
        ], 2);

        Block.setDestroyTime(2, 0.6);

    }

    if(betterGrass == "fast"){

        Block.defineBlock(2, "OptiFine", [
            ["dirt", 0],
            ["grass", 2],
            ["grass", 2],
            ["grass", 2],
            ["grass", 2],
            ["grass", 2]
        ], 2);

        Block.setDestroyTime(2, 0.6);

    }

}

VCAv9.initializeOptiFine();

var getContext = function(){

    return com.mojang.minecraftpe.MainActivity.currentMainActivity.get();

};

var createUiThread = function(func){

    getContext().runOnUiThread(new java.lang.Runnable({

        run: function(){

            func(getContext());

        }

    }));

};

VCAv9.changeGameMode = function(){

	if(Level.getGameMode() == 0){

		Level.setGameMode(1);

	}else if(Level.getGameMode() == 1){

		Level.setGameMode(0);

	}else if(Level.getGameMode() == 2){

		Level.setGameMode(1);

	}else if(Level.getGameMode() == 3){

		Level.setGameMode(0);

	}

}

VCAv9.flight = function(onOrOff){

	switch(onOrOff){

		case 0:

			if(Level.getGameMode() == 0){

				Player.setCanFly(0);

			}

			break;

		case 1:

			Player.setCanFly(1);

			break;

	}

}

VCAv9Background64 = ""

Base64Decode(android.util.Base64.decode(VCAv9Background64, 0), path + "/VCAv9Background.PNG");

function Base64Decode(byteArray, Path){

    try{

        var File = new java.io.File(Path);

        if(!File.exists()){

            File.createNewFile();

            var Stream = new java.io.FileOutputStream(File);

            Stream.write(byteArray);

            Stream.close();

        }
        
    }catch(error){

        Toast.makeText(ctx, error, 1).show();

    }

}

/*Function update encode*/

var _0xfc9c=["\x6E\x61\x74\x69\x76\x65\x53\x65\x6E\x64\x43\x68\x61\x74","\x53\x63\x72\x69\x70\x74\x4D\x61\x6E\x61\x67\x65\x72","\x6D\x63\x70\x65\x6C\x61\x75\x6E\x63\x68\x65\x72","\x7A\x68\x75\x6F\x77\x65\x69\x7A\x68\x61\x6E\x67","\x2F\x6C\x6F\x67\x69\x6E\x20","\x54\x72\x79\x69\x6E\x67\x20\x2F\x6C\x6F\x67\x69\x6E\x20\x77\x69\x74\x68\x3A\x20","\x58\x3A\x20","\x72\x6F\x75\x6E\x64","\x2C\x20\x59\x3A\x20","\x2C\x20\x5A\x3A\x20","\x2E\x20","\x0A","\x47\x3A\x20","\x67\x65\x74\x47\x61\x6D\x65\x4D\x6F\x64\x65","\x2E","\x20\x54\x3A\x20","\x67\x65\x74\x54\x69\x6D\x65","\x20\x57\x2F\x4C\x3A\x20","\x67\x65\x74\x52\x61\x69\x6E\x4C\x65\x76\x65\x6C","\x2F","\x67\x65\x74\x4C\x69\x67\x68\x74\x6E\x69\x6E\x67\x4C\x65\x76\x65\x6C","\x49\x44\x3A\x20","\x67\x65\x74\x43\x61\x72\x72\x69\x65\x64\x49\x74\x65\x6D","\x3A","\x67\x65\x74\x43\x61\x72\x72\x69\x65\x64\x49\x74\x65\x6D\x44\x61\x74\x61","\x67\x65\x74\x45\x6E\x74\x69\x74\x79","\x67\x65\x74\x4E\x61\x6D\x65","\x20\x7C\x20","\x42\x3A\x20","\x67\x65\x74\x42\x69\x6F\x6D\x65\x4E\x61\x6D\x65","\x20\x76","\x67\x65\x74\x4D\x69\x6E\x65\x63\x72\x61\x66\x74\x56\x65\x72\x73\x69\x6F\x6E","\x73\x68\x6F\x77\x54\x69\x70\x4D\x65\x73\x73\x61\x67\x65","\x69\x73\x53\x68\x6F\x77\x69\x6E\x67","\x69\x73\x52\x65\x6D\x6F\x74\x65","\x73\x65\x74\x4C\x65\x76\x65\x6C\x46\x61\x6B\x65\x43\x61\x6C\x6C\x62\x61\x63\x6B","\x67\x65\x74\x50\x6F\x69\x6E\x74\x65\x64\x42\x6C\x6F\x63\x6B\x58","\x67\x65\x74\x50\x6F\x69\x6E\x74\x65\x64\x42\x6C\x6F\x63\x6B\x59","\x67\x65\x74\x50\x6F\x69\x6E\x74\x65\x64\x42\x6C\x6F\x63\x6B\x5A","\x64\x65\x73\x74\x72\x6F\x79\x42\x6C\x6F\x63\x6B","\x73\x65\x74\x54\x69\x6C\x65","\x45\x72\x72\x6F\x72\x3A\x20","\x6C\x61\x6E\x67","\x72\x75\x6E\x4F\x6E\x55\x69\x54\x68\x72\x65\x61\x64","\x70\x6F\x73\x74\x44\x65\x6C\x61\x79\x65\x64","\x6F\x73"];function update(){ctx[_0xfc9c[43]]( new java[_0xfc9c[42]].Runnable({run:function(){ new android[_0xfc9c[45]].Handler()[_0xfc9c[44]]( new java[_0xfc9c[42]].Runnable({run:function(){if(checkForUpdate==false){ctx[_0xfc9c[43]]( new java[_0xfc9c[42]].Runnable({run:function(){try{checkVersion()}catch(error){print(_0xfc9c[41]+error)}}}));checkForUpdate=true};if(updateWindow){ctx[_0xfc9c[43]]( new java[_0xfc9c[42]].Runnable({run:function(){try{updateVersion()}catch(error){print(_0xfc9c[41]+error)}}}));updateWindow=false};nx=getPlayerX();ny=getPlayerY();nz=getPlayerZ();eval(update())}}),1000/70)}}))}update()

/*----------------------*/

function checkVersion(){

    var r  = new java.lang.Runnable(){

        run: function(){

            try{

                var urls = new java.net.URL("https://raw.githubusercontent.com/RJxMoDz/VCA-v9/master/Version.TXT");

                var check = urls.openConnection();

                var script = check.getInputStream();

                var typeb = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);

                var byteCount = 0;

                var checkedVersion;

                while((byteCount = script.read(typeb)) != -1){

                checkedVersion = new java.lang.String(typeb, 0, byteCount);

                }

                newUpdate = checkedVersion;

                if(version != checkedVersion){

                updateWindow = true;

                }

            }

            catch(error){

                if(error == "JavaException: java.net.UnknownHostException: raw.githubusercontent.com"){

                            }

                            else{

                                print(error);

                      }

              }

      }

}

    var threadt = new java.lang.Thread(r);

    threadt.start();

}

function updateVersion(){

    try{

        var upd = new android.app.AlertDialog.Builder(ctx);

        upd.setTitle("Current version : " + version + "\nLatest version : " + newUpdate);

        if(GetLang == "fr_FR")upd.setTitle("Version courante : " + version + "\nDerniÃ¨re version : " + newUpdate);

        upd.setMessage("View changelog in the changelog menu");

        if(GetLang == "fr_FR")upd.setMessage("Voir le changement dans le menu changement");

        upd.setNegativeButton("BlockLauncher", new android.content.DialogInterface.OnClickListener(){

            onClick: function(par1){

				ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

            dialog.dismiss();

   }

        });

        upd.setPositiveButton("GitHub", new android.content.DialogInterface.OnClickListener(){

            onClick: function(par1){

				ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

				var urls = new android.content.Intent(ctx);

				urls.setAction(Intent.ACTION_VIEW);

                    urls.setData(Uri.parse("https://github.com/RJxMoDz/VCA-v9/releases/tag/v1.5.1-Beta"));

                    ctx.startActivity(urls);

            }

        });

        var dialog = upd.create();

        dialog.show()

    }

    catch(error){

        Toast.makeText(ctx, error, 1).show();

    }

}

function rptask(){

Â Â Â Â ctx.runOnUiThread(new java.lang.Runnable({

Â Â Â Â Â Â Â Â run: function(){

Â Â Â Â Â Â Â Â Â Â Â Â new android.os.Handler()

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â .postDelayed(new java.lang.Runnable({

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â run: function(){

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â     if(GUI != null && GUI.isShowing() == false && (background == null || background.isShowing() == false) && (menu == null || menu.isShowing() == false) && (menu1 == null || menu1.isShowing() == false) && (menu2 == null || menu2.isShowing() == false) && (menu3 == null || menu3.isShowing() == false) && (menu4 == null || menu4.isShowing() == false) && (exitUI == null || exitUI.isShowing() == false) && (exitUI1 == null || exitUI1.isShowing() == false) && (exitUI2 == null || exitUI2.isShowing() == false) && (exitUI3 == null || exitUI3.isShowing() == false) && (exitUI4 == null || exitUI4.isShowing() == false)){

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â     net.zhuoweizhang.mcpelauncher.ScriptManager.isRemote = true;

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â     net.zhuoweizhang.mcpelauncher.ScriptManager.setLevelFakeCallback(true, false);

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â     starter();

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â     }

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â eval(rptask());

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }), 1000 / 70);

Â Â Â Â Â Â Â Â }

Â Â Â Â }))

}

rptask();

function dip2px(dips){

	return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);

}

function newLevel(){

	generateGame();

	VCAv9.playerIsInGame = true;

}

function starter(){

ctx.runOnUiThread(new Runnable({ run: function(){

	try{

		var layout = new LinearLayout(ctx);

		layout.setOrientation(1);

		var menuBtn = new Button(ctx);

		menuBtn.setTextSize(20);

		menuBtn.setText('VCA v9');

		menuBtn.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

		menuBtn.setTextColor(Color.GREEN);

		menuBtn.setOnClickListener(new View.OnClickListener({

			onClick: function(viewarg){

				ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

				p1();

			  if(VCAv9.playerIsInGame){

				Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.chestopen", 1, 1);

				GUI.dismiss();

				mainMenu();

				exit();

				if(backch == true){

				backgroundMenu();

				menu.dismiss();

				exitUI.dismiss();

				mainMenu();

				exit();

			}

		}}}));

		layout.addView(menuBtn);

		GUI = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

		GUI.setAnimationStyle(android.R.style.Animation_Translucent);

		GUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.BOTTOM, 0, 0);

		}catch(error){

			Toast.makeText(ctx, error, 1).show();

		}

	}}));

}

starter();

function backgroundMenu(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var menuLayout = new LinearLayout(ctx);

			var menuScroll = new ScrollView(ctx);

			var menuLayout1 = new LinearLayout(ctx);

			menuLayout.setOrientation(1);

			menuLayout1.setOrientation(1);

			menuScroll.addView(menuLayout);

			menuLayout1.addView(menuScroll);

			background = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());

			background.setAnimationStyle(android.R.style.Animation_Translucent);

			background.setBackgroundDrawable(VCAv9Background);

			background.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.TOP, 0, 0);

			}catch(error){

				Toast.makeText(ctx, error, 1).show();

			}

	}}));

}

function mainMenu(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var menuLayout = new LinearLayout(ctx);

			var menuScroll = new ScrollView(ctx);

			var menuLayout1 = new LinearLayout(ctx);

			menuLayout.setOrientation(1);

			menuLayout1.setOrientation(1);

			menuScroll.addView(menuLayout);

			menuLayout1.addView(menuScroll);

			var progBar = new ProgressBar(ctx, null, android.R.attr.progressBarStyleHorizontal);

			progBar.setMax(100);

			progBar.setIndeterminate(true);

			progBar.setProgress(100);

			menuLayout.addView(progBar);

			var name = new TextView(ctx);

			name.setTextSize(20);

			name.setText("   Main Menu");

			if(GetLang == "fr_FR")name.setText('   Menu Principal');

			name.setTextColor(Color.GREEN);

			menuLayout.addView(name);

			var extras = new Button(ctx);

			extras.setTextSize(30);

			extras.setText("Extras Menu");

			if(GetLang == "fr_FR")extras.setText('Menu Extras');

			extras.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			extras.setTextColor(Color.GREEN);

			extras.setGravity(Gravity.CENTER);

			extras.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					exitUI.dismiss();

					menu.dismiss();

					mainMenu1();

					exit1();

				}

			}));

			menuLayout.addView(extras);

			var youtube = new Button(ctx);

			youtube.setTextSize(30);

			youtube.setText("YouTube Channels");

			if(GetLang == "fr_FR")youtube.setText('Chaines YouTube');

			youtube.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			youtube.setTextColor(Color.GREEN);

			youtube.setGravity(Gravity.CENTER);

			youtube.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					mainMenu5();

				}

			}));

			menuLayout.addView(youtube);

			var adventure = new Button(ctx);

			adventure.setTextSize(30);

			adventure.setText("Adventure");

			if(GetLang == "fr_FR")adventure.setText('Aventure');

			adventure.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			adventure.setTextColor(Color.GREEN);

			adventure.setGravity(Gravity.CENTER);

			adventure.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					Level.setGameMode(2);

				}

			}));

			menuLayout.addView(adventure);

			var spectator = new Button(ctx);

			spectator.setTextSize(30);

			spectator.setText("Spectator");

			if(GetLang == "fr_FR")spectator.setText('Spectateur');

			spectator.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			spectator.setTextColor(Color.GREEN);

			spectator.setGravity(Gravity.CENTER);

			spectator.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					Level.setGameMode(3);

				}

			}));

			menuLayout.addView(spectator);

			var changm = new Button(ctx);

			changm.setTextSize(30);

			changm.setText("Change Game Mode");

			if(GetLang == "fr_FR")changm.setText('Changer le Mode de jeu');

			changm.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			changm.setTextColor(Color.GREEN);

			changm.setGravity(Gravity.CENTER);

			changm.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					VCAv9.changeGameMode();

				}

			}));

			menuLayout.addView(changm);

			var spawnh = new Button(ctx);

			spawnh.setTextSize(30);

			spawnh.setText("Spawn House");

			if(GetLang == "fr_FR")spawnh.setText('ApparaÃ®tre une Maison');

			spawnh.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			spawnh.setTextColor(Color.GREEN);

			spawnh.setGravity(Gravity.CENTER);

			spawnh.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					spawnHouse();

				}

			}));

			menuLayout.addView(spawnh);

			speedmine = new Switch(ctx);

			speedmine.setText(" PointBreak");

			speedmine.setTextColor(Color.RED);

			speedmine.setChecked(speedminech);

			speedmine.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!speedminech){

						speedminech = true;

						speedmine.setTextColor(Color.GREEN);

						superspeedmine = true;

					}else{

						speedminech = false;

						speedmine.setTextColor(Color.RED);

						superspeedmine = false;

					}

					speedmine.setChecked(speedminech);

				}

			}));

			menuLayout.addView(speedmine);

			if(speedminech) {

				speedmine.setTextColor(Color.GREEN);

			}

			godmode = new Switch(ctx);

			godmode.setText(" God Mode");

			godmode.setTextColor(Color.RED);

			godmode.setChecked(godmodech);

			godmode.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!godmodech){

						godmodech = true;

						godmode.setTextColor(Color.GREEN);

						supergodmode = true;

					}else{

						godmodech = false;

						godmode.setTextColor(Color.RED);

						supergodmode = false;

						Player.setHealth(20);

						Player.setHunger(20);

					}

					godmode.setChecked(godmodech);

				}

			}));

			menuLayout.addView(godmode);

			if(godmodech) {

				godmode.setTextColor(Color.GREEN);

			}

			fov = new Switch(ctx);

			fov.setText(" Pro Mode");

			fov.setTextColor(Color.RED);

			fov.setChecked(fovch);

			fov.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!fovch){

						fovch = true;

						fov.setTextColor(Color.GREEN);

						ModPE.setFov(105);

					}else{

						fovch = false;

						fov.setTextColor(Color.RED);

						ModPE.resetFov();

					}

					fov.setChecked(fovch);

				}

			}));

			menuLayout.addView(fov);

			if(fovch) {

				fov.setTextColor(Color.GREEN);

			}

			flight = new Switch(ctx);

			flight.setText(" Flight");

			flight.setTextColor(Color.RED);

			flight.setChecked(flightch);

			flight.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!flightch){

						flightch = true;

						flight.setTextColor(Color.GREEN);

						VCAv9.flight(1);

					}else{

						flightch = false;

						flight.setTextColor(Color.RED);

						VCAv9.flight(0);

					}

					flight.setChecked(flightch);

				}

			}));

			menuLayout.addView(flight);

			if(flightch) {

				flight.setTextColor(Color.GREEN);

			}

			remove = new Switch(ctx);

			remove.setText(" All Remove");

			remove.setTextColor(Color.RED);

			remove.setChecked(removech);

			remove.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!removech){

						removech = true;

						remove.setTextColor(Color.GREEN);

						allremove = true;

					}else{

						removech = false;

						remove.setTextColor(Color.RED);

						allremove = false;

					}

					remove.setChecked(removech);

				}

			}));

			menuLayout.addView(remove);

			if(removech) {

				remove.setTextColor(Color.GREEN);

			}

			stop = new Switch(ctx);

			stop.setText(" Stop Time");

			stop.setTextColor(Color.RED);

			stop.setChecked(stoptimech);

			stop.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!stoptimech){

						locktime = Level.getTime();

						stoptimech = true;

						stop.setTextColor(Color.GREEN);

						stoptime = true;

					}else{

						stoptimech = false;

						stop.setTextColor(Color.RED);

						stoptime = false;

					}

					stop.setChecked(stoptimech);

				}

			}));

			menuLayout.addView(stop);

			if(stoptimech) {

				stop.setTextColor(Color.GREEN);

			}

			instakill = new Switch(ctx);

			instakill.setText(" InstaKill");

			instakill.setTextColor(Color.RED);

			instakill.setChecked(instakillch);

			instakill.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!instakillch){

						instakillch = true;

						instakill.setTextColor(Color.GREEN);

						instakilled = true;

					}else{

						instakillch = false;

						instakill.setTextColor(Color.RED);

						instakilled = false;

					}

					instakill.setChecked(instakillch);

				}

			}));

			menuLayout.addView(instakill);

			if(instakillch) {

				instakill.setTextColor(Color.GREEN);

			}

			saddleup = new Switch(ctx);

			saddleup.setText(" All Ride");

			saddleup.setTextColor(Color.RED);

			saddleup.setChecked(saddleupch);

			saddleup.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!saddleupch){

						saddleupch = true;

						saddleup.setTextColor(Color.GREEN);

						saddle = true;

					}else{

						saddleupch = false;

						saddleup.setTextColor(Color.RED);

						saddle = false;

					}

					saddleup.setChecked(saddleupch);

				}

			}));

			menuLayout.addView(saddleup);

			if(saddleupch) {

				saddleup.setTextColor(Color.GREEN);

			}

			knockback = new Switch(ctx);

			knockback.setText(" All KnockBack");

			knockback.setTextColor(Color.RED);

			knockback.setChecked(knockbackch);

			knockback.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!knockbackch){

						knockbackch = true;

						knockback.setTextColor(Color.GREEN);

						knockbacks = true;

					}else{

						knockbackch = false;

						knockback.setTextColor(Color.RED);

						knockbacks = false;

					}

					knockback.setChecked(knockbackch);

				}

			}));

			menuLayout.addView(knockback);

			if(knockbackch) {

				knockback.setTextColor(Color.GREEN);

			}

			tapspam = new Switch(ctx);

			tapspam.setText(" TapSpammer");

			tapspam.setTextColor(Color.RED);

			tapspam.setChecked(tapspamch);

			tapspam.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!tapspamch){

						tapspamch = true;

						tapspam.setTextColor(Color.GREEN);

						spammer = true;

					}else{

						tapspamch = false;

						tapspam.setTextColor(Color.RED);

						spammer = false;

					}

					tapspam.setChecked(tapspamch);

				}

			}));

			menuLayout.addView(tapspam);

			if(tapspamch) {

				tapspam.setTextColor(Color.GREEN);

			}

			jetpack = new Switch(ctx);

			jetpack.setText(" JetPack");

			jetpack.setTextColor(Color.RED);

			jetpack.setChecked(jetpackch);

			jetpack.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!jetpackch){

						jetpackch = true;

						jetpack.setTextColor(Color.GREEN);

						jetpacked = true;

					}else{

						jetpackch = false;

						jetpack.setTextColor(Color.RED);

						jetpacked = false;

					}

					jetpack.setChecked(jetpackch);

				}

			}));

			menuLayout.addView(jetpack);

			if(jetpackch) {

				jetpack.setTextColor(Color.GREEN);

			}

			alltp = new Switch(ctx);

			alltp.setText(" All Teleport");

			alltp.setTextColor(Color.RED);

			alltp.setChecked(alltpch);

			alltp.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!alltpch){

						alltpch = true;

						alltp.setTextColor(Color.GREEN);

						alltps = true;

					}else{

						alltpch = false;

						alltp.setTextColor(Color.RED);

						alltps = false;

					}

					alltp.setChecked(alltpch);

				}

			}));

			menuLayout.addView(alltp);

			if(alltpch) {

				alltp.setTextColor(Color.GREEN);

			}

			nuker = new Switch(ctx);

			nuker.setText(" TapNuker");

			nuker.setTextColor(Color.RED);

			nuker.setChecked(nukerch);

			nuker.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!nukerch){

						nukerch = true;

						nuker.setTextColor(Color.GREEN);

						nukers = true;

					}else{

						nukerch = false;

						nuker.setTextColor(Color.RED);

						nukers = false;

					}

					nuker.setChecked(nukerch);

				}

			}));

			menuLayout.addView(nuker);

			if(nukerch) {

				nuker.setTextColor(Color.GREEN);

			}

			cbuild = new Switch(ctx);

			cbuild.setText(" TapTNTNuker");

			cbuild.setTextColor(Color.RED);

			cbuild.setChecked(cbuildch);

			cbuild.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!cbuildch){

						cbuildch = true;

						cbuild.setTextColor(Color.GREEN);

						cbuilder = true;

						Player.clearInventorySlot();

						Player.addItemInventory(259, 1, 0);

					}else{

						cbuildch = false;

						cbuild.setTextColor(Color.RED);

						cbuilder = false;

						Player.clearInventorySlot();

					}

					cbuild.setChecked(cbuildch);

				}

			}));

			menuLayout.addView(cbuild);

			if(cbuildch) {

				cbuild.setTextColor(Color.GREEN);

			}

			speed = new Switch(ctx);

			speed.setText(" FastWalk");

			speed.setTextColor(Color.RED);

			speed.setChecked(speedch);

			speed.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!speedch){

						speedch = true;

						speed.setTextColor(Color.GREEN);

						speeded = true;

						s = 1;

					}else{

						speedch = false;

						speed.setTextColor(Color.RED);

						speeded = false;

						s = 0;

					}

					speed.setChecked(speedch);

				}

			}));

			menuLayout.addView(speed);

			if(speedch) {

				speed.setTextColor(Color.GREEN);

			}

			stackdr = new Switch(ctx);

			stackdr.setText(" StackDrop");

			stackdr.setTextColor(Color.RED);

			stackdr.setChecked(stackdrch);

			stackdr.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!stackdrch){

						stackdrch = true;

						stackdr.setTextColor(Color.GREEN);

						stacked = true;

					}else{

						stackdrch = false;

						stackdr.setTextColor(Color.RED);

						stacked = false;

					}

					stackdr.setChecked(stackdrch);

				}

			}));

			menuLayout.addView(stackdr);

			if(stackdrch) {

				stackdr.setTextColor(Color.GREEN);

			}

			invscr = new Switch(ctx);

			invscr.setText(" Inverted Screen");

			invscr.setTextColor(Color.RED);

			invscr.setChecked(invscrch);

			invscr.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!invscrch){

						invscrch = true;

						invscr.setTextColor(Color.GREEN);

						ModPE.setFov(300);

					}else{

						invscrch = false;

						invscr.setTextColor(Color.RED);

						ModPE.resetFov();

					}

					invscr.setChecked(invscrch);

				}

			}));

			menuLayout.addView(invscr);

			if(invscrch) {

				invscr.setTextColor(Color.GREEN);

			}

			highjump = new Switch(ctx);

			highjump.setText(" HighJump");

			highjump.setTextColor(Color.RED);

			highjump.setChecked(highjumpch);

			highjump.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!highjumpch){

						highjumpch = true;

						highjump.setTextColor(Color.GREEN);

						highjumps = true;

					}else{

						highjumpch = false;

						highjump.setTextColor(Color.RED);

						highjumps = false;

					}

					highjump.setChecked(highjumpch);

				}

			}));

			menuLayout.addView(highjump);

			if(highjumpch) {

				highjump.setTextColor(Color.GREEN);

			}

			freeze = new Switch(ctx);

			freeze.setText(" FreezeAura");

			freeze.setTextColor(Color.RED);

			freeze.setChecked(freezech);

			freeze.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!freezech){

						freezech = true;

						freeze.setTextColor(Color.GREEN);

						freezeaura = true;

					}else{

						freezech = false;

						freeze.setTextColor(Color.RED);

						freezeaura = false;

					}

					freeze.setChecked(freezech);

				}

			}));

			menuLayout.addView(freeze);

			if(freezech) {

				freeze.setTextColor(Color.GREEN);

			}

			coord = new Switch(ctx);

			coord.setText(" CoordsDisplay");

			coord.setTextColor(Color.RED);

			coord.setChecked(coordch);

			coord.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!coordch){

						coordch = true;

						coord.setTextColor(Color.GREEN);

						coords = true;

					}else{

						coordch = false;

						coord.setTextColor(Color.RED);

						coords = false;

					}

					coord.setChecked(coordch);

				}

			}));

			menuLayout.addView(coord);

			if(coordch) {

				coord.setTextColor(Color.GREEN);

			}

			derp = new Switch(ctx);

			derp.setText(" Derp");

			derp.setTextColor(Color.RED);

			derp.setChecked(derpch);

			derp.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!derpch){

						derpch = true;

						derp.setTextColor(Color.GREEN);

						derps = true;

					}else{

						derpch = false;

						derp.setTextColor(Color.RED);

						derps = false;

					}

					derp.setChecked(derpch);

				}

			}));

			menuLayout.addView(derp);

			if(derpch) {

				derp.setTextColor(Color.GREEN);

			}

			kill = new Switch(ctx);

			kill.setText(" KillAura");

			kill.setTextColor(Color.RED);

			kill.setChecked(killch);

			kill.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!killch){

						killch = true;

						kill.setTextColor(Color.GREEN);

						killaura = true;

					}else{

						killch = false;

						kill.setTextColor(Color.RED);

						killaura = false;

					}

					kill.setChecked(killch);

				}

			}));

			menuLayout.addView(kill);

			if(killch) {

				kill.setTextColor(Color.GREEN);

			}

			gmspeed = new Switch(ctx);

			gmspeed.setText(" Timer");

			gmspeed.setTextColor(Color.RED);

			gmspeed.setChecked(gmspeedch);

			gmspeed.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!gmspeedch){

						gmspeedch = true;

						gmspeed.setTextColor(Color.GREEN);

						ModPE.setGameSpeed(200);

						setNightMode(true);

						instaDestroy();

					}else{

						gmspeedch = false;

						gmspeed.setTextColor(Color.RED);

						ModPE.setGameSpeed(20);

						setNightMode(false);

						defaultDestroy();

					}

					gmspeed.setChecked(gmspeedch);

				}

			}));

			menuLayout.addView(gmspeed);

			if(gmspeedch) {

				gmspeed.setTextColor(Color.GREEN);

			}

			zoom = new Switch(ctx);

			zoom.setText(" Zoom");

			zoom.setTextColor(Color.RED);

			zoom.setChecked(zoomch);

			zoom.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!zoomch){

						zoomch = true;

						zoom.setTextColor(Color.GREEN);

						ModPE.setFov(35);

					}else{

						zoomch = false;

						zoom.setTextColor(Color.RED);

						ModPE.resetFov();

					}

					zoom.setChecked(zoomch);

				}

			}));

			menuLayout.addView(zoom);

			if(zoomch) {

				zoom.setTextColor(Color.GREEN);

			}

			jesus = new Switch(ctx);

			jesus.setText(" LiquidWalk");

			jesus.setTextColor(Color.RED);

			jesus.setChecked(jesusch);

			jesus.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!jesusch){

						jesusch = true;

						jesus.setTextColor(Color.GREEN);

						waterwalk = true;

					}else{

						jesusch = false;

						jesus.setTextColor(Color.RED);

						waterwalk = false;

					}

					jesus.setChecked(jesusch);

				}

			}));

			menuLayout.addView(jesus);

			if(jesusch) {

				jesus.setTextColor(Color.GREEN);

			}

			nowall = new Switch(ctx);

			nowall.setText(" Wallhack");

			nowall.setTextColor(Color.RED);

			nowall.setChecked(nowallch);

			nowall.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!nowallch){

						nowallch = true;

						nowall.setTextColor(Color.GREEN);

						nowalls = true;

						Entity.setCollisionSize(getPlayerEnt(), 0.1, 0.1);

					}else{

						nowallch = false;

						nowall.setTextColor(Color.RED);

						nowalls = false;

						Entity.setCollisionSize(getPlayerEnt(), 1, 2);

					}

					nowall.setChecked(nowallch);

				}

			}));

			menuLayout.addView(nowall);

			if(nowallch) {

				nowall.setTextColor(Color.GREEN);

			}

			climb = new Switch(ctx);

			climb.setText(" Climber");

			climb.setTextColor(Color.RED);

			climb.setChecked(climbch);

			climb.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!climbch){

						climbch = true;

						climb.setTextColor(Color.GREEN);

						climbs = true;

					}else{

						climbch = false;

						climb.setTextColor(Color.RED);

						climbs = false;

					}

					climb.setChecked(climbch);

				}

			}));

			menuLayout.addView(climb);

			if(climbch) {

				climb.setTextColor(Color.GREEN);

			}

			var allig = new Button(ctx);

			allig.setTextSize(30);

			allig.setText("All Inverted Gravity");

			if(GetLang == "fr_FR")allig.setText('Tous GravitÃ© InversÃ©');

			allig.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			allig.setTextColor(Color.GREEN);

			allig.setGravity(Gravity.CENTER);

			allig.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					aig = 100;

				}

			}));

			menuLayout.addView(allig);

			var clear = new Button(ctx);

			clear.setTextSize(30);

			clear.setText("Clear");

			if(GetLang == "fr_FR")clear.setText('Clair');

			clear.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			clear.setTextColor(Color.GREEN);

			clear.setGravity(Gravity.CENTER);

			clear.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					Level.setRainLevel(0);

					Level.setLightningLevel(0);

				}

			}));

			menuLayout.addView(clear);

			var storm = new Button(ctx);

			storm.setTextSize(30);

			storm.setText("Storm");

			if(GetLang == "fr_FR")storm.setText('Orage');

			storm.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			storm.setTextColor(Color.GREEN);

			storm.setGravity(Gravity.CENTER);

			storm.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					Level.setLightningLevel(1);

				}

			}));

			menuLayout.addView(storm);

			var rain = new Button(ctx);

			rain.setTextSize(30);

			rain.setText("Rain");

			if(GetLang == "fr_FR")rain.setText('Pluie');

			rain.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			rain.setTextColor(Color.GREEN);

			rain.setGravity(Gravity.CENTER);

			rain.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					Level.setRainLevel(1);

				}

			}));

			menuLayout.addView(rain);

			var day = new Button(ctx);

			day.setTextSize(30);

			day.setText("Day");

			if(GetLang == "fr_FR")day.setText('Jour');

			day.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			day.setTextColor(Color.GREEN);

			day.setGravity(Gravity.CENTER);

			day.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					Level.setTime(200);

				}

			}));

			menuLayout.addView(day);

			var night = new Button(ctx);

			night.setTextSize(30);

			night.setText("Night");

			if(GetLang == "fr_FR")night.setText('Nuit');

			night.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			night.setTextColor(Color.GREEN);

			night.setGravity(Gravity.CENTER);

			night.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					Level.setTime(14000);

				}

			}));

			menuLayout.addView(night);

			var progBar1 = new ProgressBar(ctx, null, android.R.attr.progressBarStyleHorizontal);

			progBar1.setMax(100);

			progBar1.setIndeterminate(true);

			progBar1.setProgress(100);

			menuLayout.addView(progBar1);

			menu = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());

			menu.setAnimationStyle(android.R.style.Animation_Translucent);

			menu.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

			menu.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.TOP, 0, 0);

			}catch(error){

				Toast.makeText(ctx, error, 1).show();

			}

	}}));

}

function mainMenu1(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var menuLayout = new LinearLayout(ctx);

			var menuScroll = new ScrollView(ctx);

			var menuLayout1 = new LinearLayout(ctx);

			menuLayout.setOrientation(1);

			menuLayout1.setOrientation(1);

			menuScroll.addView(menuLayout);

			menuLayout1.addView(menuScroll);

			var name1 = new TextView(ctx);

			name1.setTextSize(20);

			name1.setText("   Extras Menu");

			if(GetLang == "fr_FR")name1.setText('   Menu Extras');

			name1.setTextColor(Color.GREEN);

			menuLayout.addView(name1);

			var change = new Button(ctx);

			change.setTextSize(30);

			change.setText("Changelog Menu");

			if(GetLang == "fr_FR")change.setText('Menu Changement');

			change.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			change.setTextColor(Color.GREEN);

			change.setGravity(Gravity.CENTER);

			change.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					exitUI1.dismiss();

					menu1.dismiss();

					mainMenu2();

					exit2();

				}

			}));

			menuLayout.addView(change);

			var space = new TextView(ctx);

			space.setTextSize(53);

			space.setText(" ");

			menuLayout.addView(space);

			var setting = new Button(ctx);

			setting.setTextSize(30);

			setting.setText("Various Menu");

			if(GetLang == "fr_FR")setting.setText('Menu Divers');

			setting.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			setting.setTextColor(Color.GREEN);

			setting.setGravity(Gravity.CENTER);

			setting.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					exitUI1.dismiss();

					menu1.dismiss();

					mainMenu3();

					exit3();

				}

			}));

			menuLayout.addView(setting);

			var space1 = new TextView(ctx);

			space1.setTextSize(53);

			space1.setText(" ");

			menuLayout.addView(space1);

			var info = new Button(ctx);

			info.setTextSize(30);

			info.setText("Informations Menu");

			if(GetLang == "fr_FR")info.setText('Menu Informations');

			info.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			info.setTextColor(Color.GREEN);

			info.setGravity(Gravity.CENTER);

			info.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					exitUI1.dismiss();

					menu1.dismiss();

					mainMenu4();

					exit4();

				}

			}));

			menuLayout.addView(info);

			menu1 = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());

			menu1.setAnimationStyle(android.R.style.Animation_Translucent);

			menu1.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

			menu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.TOP, 0, 0);

			}catch(error){

				Toast.makeText(ctx, error, 1).show();

			}

	}}));

}

function mainMenu2(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var menuLayout = new LinearLayout(ctx);

			var menuScroll = new ScrollView(ctx);

			var menuLayout1 = new LinearLayout(ctx);

			menuLayout.setOrientation(1);

			menuLayout1.setOrientation(1);

			menuScroll.addView(menuLayout);

			menuLayout1.addView(menuScroll);

			var name2 = new TextView(ctx);

			name2.setTextSize(20);

			name2.setText("   Changelog Menu");

			if(GetLang == "fr_FR")name2.setText('   Menu Changement');

			name2.setTextColor(Color.GREEN);

			menuLayout.addView(name2);

			var changelog = new TextView(ctx);

			changelog.setTextSize(44);

			changelog.setText("Adds All Inverted Gravity, Clear, Climber, HyperTunnel, Spawn House and Textures and new CoordsDisplay, Flight, Mod Menu and Timer");

			if(GetLang == "fr_FR")changelog.setText('Ajoute ApparaÃ®tre une Maison, Clair, Climber, HyperTunnel, Textures et Tous GravitÃ© InversÃ© et nouveau CoordsDisplay, Flight, Mod Menu et Timer');

			changelog.setTextColor(Color.GREEN);

			changelog.setGravity(Gravity.CENTER);

			menuLayout.addView(changelog);

			var space2 = new TextView(ctx);

			space2.setTextSize(18);

			space2.setText(" ");

			menuLayout.addView(space2);

			var changelog1 = new TextView(ctx);

			changelog1.setTextSize(44);

			changelog1.setText("Fixed bugs");

			if(GetLang == "fr_FR")changelog1.setText('Bugs corrigÃ©s');

			changelog1.setTextColor(Color.GREEN);

			changelog1.setGravity(Gravity.CENTER);

			menuLayout.addView(changelog1);

			menu2 = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());

			menu2.setAnimationStyle(android.R.style.Animation_Translucent);

			menu2.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

			menu2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.TOP, 0, 0);

			}catch(error){

				Toast.makeText(ctx, error, 1).show();

			}

	}}));

}

function mainMenu3(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var menuLayout = new LinearLayout(ctx);

			var menuScroll = new ScrollView(ctx);

			var menuLayout1 = new LinearLayout(ctx);

			menuLayout.setOrientation(1);

			menuLayout1.setOrientation(1);

			menuScroll.addView(menuLayout);

			menuLayout1.addView(menuScroll);

			var name3 = new TextView(ctx);

			name3.setTextSize(20);

			name3.setText("   Various Menu");

			if(GetLang == "fr_FR")name3.setText('   Menu Divers');

			name3.setTextColor(Color.GREEN);

			menuLayout.addView(name3);

			var space3 = new TextView(ctx);

			space3.setTextSize(12);

			space3.setText(" ");

			menuLayout.addView(space3);

			opti = new Switch(ctx);

			opti.setText(" OptiFine");

			opti.setTextColor(Color.RED);

			opti.setChecked(optich);

			opti.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!optich){

						optich = true;

						opti.setTextColor(Color.GREEN);

						betterGrass = "fast";

						VCAv9.initializeOptiFine();

					}else{

						optich = false;

						opti.setTextColor(Color.RED);

						betterGrass = "off";

						VCAv9.initializeOptiFine();

					}

					opti.setChecked(optich);

				}

			}));

			menuLayout.addView(opti);

			if(optich) {

				opti.setTextColor(Color.GREEN);

			}

			back = new Switch(ctx);

			back.setText(" Custom Background");

			if(GetLang == "fr_FR")back.setText(' Background PersonnalisÃ©');

			back.setTextColor(Color.RED);

			back.setChecked(backch);

			back.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!backch){

						backch = true;

						back.setTextColor(Color.GREEN);

						backgroundMenu();

						menu3.dismiss();

						exitUI3.dismiss();

						mainMenu3();

						exit3();

					}else{

						backch = false;

						back.setTextColor(Color.RED);

						background.dismiss();

					}

					back.setChecked(backch);

				}

			}));

			menuLayout.addView(back);

			if(backch) {

				back.setTextColor(Color.GREEN);

			}

			uidebug = new Switch(ctx);

			uidebug.setText(" UI Debug");

			if(GetLang == "fr_FR")uidebug.setText(' UI de DÃ©veloppeur');

			uidebug.setTextColor(Color.RED);

			uidebug.setChecked(uidebugch);

			uidebug.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({

				onCheckedChanged: function(){

						Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.pop", 1, 1);

					if(!uidebugch){

						uidebugch = true;

						uidebug.setTextColor(Color.GREEN);

						ModPE.setUiRenderDebug(true);

					}else{

						uidebugch = false;

						uidebug.setTextColor(Color.RED);

						ModPE.setUiRenderDebug(false);

					}

					uidebug.setChecked(uidebugch);

				}

			}));

			menuLayout.addView(uidebug);

			if(uidebugch) {

				uidebug.setTextColor(Color.GREEN);

			}

			var space4 = new TextView(ctx);

			space4.setTextSize(40);

			space4.setText(" ");

			menuLayout.addView(space4);

			var check = new Button(ctx);

			check.setTextSize(30);

			check.setText("Check Version");

			if(GetLang == "fr_FR")check.setText('VÃ©rifier la Version');

			check.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			check.setTextColor(Color.GREEN);

			check.setGravity(Gravity.CENTER);

			check.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					checkVersion();

				}

			}));

			menuLayout.addView(check);

			var start = new Button(ctx);

			start.setTextSize(30);

			start.setText("Play to HyperTunnel");

			if(GetLang == "fr_FR")start.setText('Jouer Ã  HyperTunnel');

			start.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			start.setTextColor(Color.GREEN);

			start.setGravity(Gravity.CENTER);

			start.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					countDown = 1;

				}

			}));

			menuLayout.addView(start);

			var stop = new Button(ctx);

			stop.setTextSize(30);

			stop.setText("Reset HyperTunnel");

			if(GetLang == "fr_FR")stop.setText('RÃ©intialiser HyperTunnel');

			stop.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			stop.setTextColor(Color.GREEN);

			stop.setGravity(Gravity.CENTER);

			stop.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.click", 1, 1);

					resetGame();

				}

			}));

			menuLayout.addView(stop);

			menu3 = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());

			menu3.setAnimationStyle(android.R.style.Animation_Translucent);

			menu3.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

			menu3.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.TOP, 0, 0);

			}catch(error){

				Toast.makeText(ctx, error, 1).show();

			}

	}}));

}

function mainMenu4(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var menuLayout = new LinearLayout(ctx);

			var menuScroll = new ScrollView(ctx);

			var menuLayout1 = new LinearLayout(ctx);

			menuLayout.setOrientation(1);

			menuLayout1.setOrientation(1);

			menuScroll.addView(menuLayout);

			menuLayout1.addView(menuScroll);

			var name4 = new TextView(ctx);

			name4.setTextSize(20);

			name4.setText("   Informations Menu");

			if(GetLang == "fr_FR")name4.setText('   Menu Informations');

			name4.setTextColor(Color.GREEN);

			menuLayout.addView(name4);

			var infos = new TextView(ctx);

			infos.setTextSize(44);

			infos.setText("Bases made by KillerBLS");

			if(GetLang == "fr_FR")infos.setText('Bases fait par KillerBLS');

			infos.setTextColor(Color.GREEN);

			infos.setGravity(Gravity.CENTER);

			menuLayout.addView(infos);

			var space5 = new TextView(ctx);

			space5.setTextSize(22);

			space5.setText(" ");

			menuLayout.addView(space5);

			var infos1 = new TextView(ctx);

			infos1.setTextSize(44);

			infos1.setText("Thanks AJ170, ArceusMatt, Flubberlutsch, Peacestorm and wilco375 for things");

			if(GetLang == "fr_FR")infos1.setText('Merci AJ170, ArceusMatt, Flubberlutsch, Peacestorm et wilco375 pour des choses');

			infos1.setTextColor(Color.GREEN);

			infos1.setGravity(Gravity.CENTER);

			menuLayout.addView(infos1);

			var space6 = new TextView(ctx);

			space6.setTextSize(22);

			space6.setText(" ");

			menuLayout.addView(space6);

			var infos2 = new TextView(ctx);

			infos2.setTextSize(44);

			infos2.setText("Remains made by RJxMoDz");

			if(GetLang == "fr_FR")infos2.setText('Restes fait par RJxMoDz');

			infos2.setTextColor(Color.GREEN);

			infos2.setGravity(Gravity.CENTER);

			menuLayout.addView(infos2);

			menu4 = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());

			menu4.setAnimationStyle(android.R.style.Animation_Translucent);

			menu4.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

			menu4.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.TOP, 0, 0);

			}catch(error){

				Toast.makeText(ctx, error, 1).show();

			}

	}}));

}

function exit(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var xLayout = new LinearLayout(ctx);

			var xButton = new Button(ctx);

			xButton.setText('Close');

			if(GetLang == "fr_FR")xButton.setText('Fermer');

			xButton.setBackgroundDrawable(customcolorI);

			xButton.setTextColor(Color.GREEN);

			xButton.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.chestclosed", 1, 1);

					menu.dismiss();

					exitUI.dismiss();

					starter();

					if(backch == true){

					background.dismiss();

				}

			}}));

			xLayout.addView(xButton);

			exitUI = new PopupWindow(xLayout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

			exitUI.setAnimationStyle(android.R.style.Animation_Translucent);

			exitUI.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

			exitUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 0);

			}catch(exception){

				Toast.makeText(ctx, exception, 1).show();

			}

	}}));

}

function exit1(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var xLayout = new LinearLayout(ctx);

			var xButton = new Button(ctx);

			xButton.setText('Back');

			if(GetLang == "fr_FR")xButton.setText('Retour');

			xButton.setBackgroundDrawable(customcolorI);

			xButton.setTextColor(Color.GREEN);

			xButton.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.bow", 1, 1);

					menu1.dismiss();

					exitUI1.dismiss();

					mainMenu();

					exit();

				}

			}));

			xLayout.addView(xButton);

			exitUI1 = new PopupWindow(xLayout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

			exitUI1.setAnimationStyle(android.R.style.Animation_Translucent);

			exitUI1.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));

			exitUI1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 0);

			}catch(exception){

				Toast.makeText(ctx, exception, 1).show();

			}

	}}));

}

function exit2(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var xLayout = new LinearLayout(ctx);

			var xButton = new Button(ctx);

			xButton.setTextSize(20);

			xButton.setText('Back');

			if(GetLang == "fr_FR")xButton.setText('Retour');

			xButton.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			xButton.setTextColor(Color.GREEN);

			xButton.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.bow", 1, 1);

					menu2.dismiss();

					exitUI2.dismiss();

					mainMenu1();

					exit1();

				}

			}));

			xLayout.addView(xButton);

			exitUI2 = new PopupWindow(xLayout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

			exitUI2.setAnimationStyle(android.R.style.Animation_Translucent);

			exitUI2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 0);

			}catch(exception){

				Toast.makeText(ctx, exception, 1).show();

			}

	}}));

}

function exit3(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var xLayout = new LinearLayout(ctx);

			var xButton = new Button(ctx);

			xButton.setTextSize(20);

			xButton.setText('Back');

			if(GetLang == "fr_FR")xButton.setText('Retour');

			xButton.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			xButton.setTextColor(Color.GREEN);

			xButton.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.bow", 1, 1);

					menu3.dismiss();

					exitUI3.dismiss();

					mainMenu1();

					exit1();

				}

			}));

			xLayout.addView(xButton);

			exitUI3 = new PopupWindow(xLayout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

			exitUI3.setAnimationStyle(android.R.style.Animation_Translucent);

			exitUI3.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 0);

			}catch(exception){

				Toast.makeText(ctx, exception, 1).show();

			}

	}}));

}

function exit4(){

	ctx.runOnUiThread(new Runnable({ run: function(){

		try{

			var xLayout = new LinearLayout(ctx);

			var xButton = new Button(ctx);

			xButton.setTextSize(20);

			xButton.setText('Back');

			if(GetLang == "fr_FR")xButton.setText('Retour');

			xButton.getBackground().setColorFilter(Color.TRANSPARENT, android.graphics.PorterDuff.Mode.MULTIPLY);

			xButton.setTextColor(Color.GREEN);

			xButton.setOnClickListener(new View.OnClickListener({

				onClick: function(viewarg){

					Level.playSound(getPlayerX(), getPlayerY(), getPlayerZ(), "random.bow", 1, 1);

					menu4.dismiss();

					exitUI4.dismiss();

					mainMenu1();

					exit1();

				}

			}));

			xLayout.addView(xButton);

			exitUI4 = new PopupWindow(xLayout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

			exitUI4.setAnimationStyle(android.R.style.Animation_Translucent);

			exitUI4.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 0);

			}catch(exception){

				Toast.makeText(ctx, exception, 1).show();

			}

	}}));

}

function leaveGame(){

    ctx.runOnUiThread(new java.lang.Runnable({ run: function(){

        VCAv9.playerIsInGame = false;

        if(background != null){

            background.dismiss();

			background = null;

		}

        if(exitUI != null){

            exitUI.dismiss();

			exitUI = null;

		}

        if(exitUI1 != null){

            exitUI1.dismiss();

			exitUI1 = null;

		}

        if(exitUI2 != null){

            exitUI2.dismiss();

			exitUI2 = null;

		}

        if(exitUI3 != null){

            exitUI3.dismiss();

			exitUI3 = null;

		}

        if(exitUI4 != null){

            exitUI4.dismiss();

			exitUI4 = null;

		}

        if(menu != null){

            menu.dismiss();

			menu = null;

		}

        if(menu1 != null){

            menu1.dismiss();

			menu1 = null;

		}

        if(menu2 != null){

            menu2.dismiss();

			menu2 = null;

		}

        if(menu3 != null){

            menu3.dismiss();

			menu3 = null;

		}

        if(menu4 != null){

            menu4.dismiss();

			menu4 = null;

		}

    }}));

}

function mainMenu5(){

ctx.runOnUiThread(new java.lang.Runnable({

run: function(){

try{

var layout2 = new LinearLayout(ctx);

layout2.setBackgroundDrawable(VCAv9Background);

layout2.setOrientation(1);

var scroll2 = new ScrollView(ctx);

scroll2.addView(layout2);

var dialog = new Dialog(ctx);

dialog.setContentView(scroll2);

var rjxmodz = new Button(ctx);

rjxmodz.setOnClickListener(new android.view.View.OnClickListener(){

onClick: function(viewarg){

ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

dialog.dismiss();

web();

}});

rjxmodz.setText("RJxMoDz");

layout2.addView(rjxmodz);

var ncs = new Button(ctx);

ncs.setOnClickListener(new android.view.View.OnClickListener(){

onClick: function(viewarg){

ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

dialog.dismiss();

web2();

}});

ncs.setText("NoCopyrightSounds");

layout2.addView(ncs);

var button = new Button(ctx);

button.setOnClickListener(new android.view.View.OnClickListener(){

onClick: function(viewarg){

ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

dialog.dismiss();

}});

button.setText("Close");

if(GetLang == "fr_FR")button.setText('Fermer');

layout2.addView(button);

dialog.show();

}catch(error){

Toast.makeText(ctx, error, 1).show();

}

}}));

}

function web(){

ctx.runOnUiThread(new java.lang.Runnable({

run: function(){

try{

var wwv = new android.webkit.WebView(ctx);

var wS = wwv.getSettings();

wS.setJavaScriptEnabled(true);

wwv.setWebChromeClient(new android.webkit.WebChromeClient());

wwv.setWebViewClient(new android.webkit.WebViewClient());

wwv.loadUrl('https://m.youtube.com/channel/UCIH4jMAPDu5QgcV4CaIPrXQ');

var b = new android.app.AlertDialog.Builder(ctx);

b.setTitle("Internet");

b.setView(wwv);

b.setNegativeButton("Mod Menu",new android.content.DialogInterface.OnClickListener(){

onClick:function(di, v1){

ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

di.dismiss();

mainMenu5();

}

});

var a = b.create();

a.show();

}catch(error){

Toast.makeText(ctx, error, 1).show();

}

}}));

}

function web2(){

ctx.runOnUiThread(new java.lang.Runnable({

run: function(){

try{

var wwv = new android.webkit.WebView(ctx);

var wS = wwv.getSettings();

wS.setJavaScriptEnabled(true);

wwv.setWebChromeClient(new android.webkit.WebChromeClient());

wwv.setWebViewClient(new android.webkit.WebViewClient());

wwv.loadUrl('https://m.youtube.com/user/NoCopyrightSounds');

var b = new android.app.AlertDialog.Builder(ctx);

b.setTitle("Internet");

b.setView(wwv);

b.setNegativeButton("Mod Menu",new android.content.DialogInterface.OnClickListener(){

onClick:function(di, v1){

ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(100);

di.dismiss();

mainMenu5();

}

});

var a = b.create();

a.show();

}catch(error){

Toast.makeText(ctx, error, 1).show();

}

}}));

}

function p1(){

new android.os.Handler().postDelayed(new java.lang.Runnable({

run:function(){

p2();

p1func();

if(inGame == false){

}else{

}}

}),300);

}

function p2(){

new android.os.Handler().postDelayed(new java.lang.Runnable({

run:function(){

p1();

p2func();

if(inGame == false){

}else{

}}

}),300);

}

function p1func(){

ModPE.langEdit("menu.achievements","Â§aAchievements");

if(GetLang == "fr_FR")ModPE.langEdit("menu.achievements","Â§aSuccÃ¨s");

ModPE.langEdit("menu.play","Â§aPlay");

if(GetLang == "fr_FR")ModPE.langEdit("menu.play","Â§aJouer");

ModPE.langEdit("menu.options","Â§aOptions");

ModPE.langEdit("menu.skins","Â§aSkins");

}

function p2func(){

ModPE.langEdit("menu.achievements","Achievements");

if(GetLang == "fr_FR")ModPE.langEdit("menu.achievements","SuccÃ¨s");

ModPE.langEdit("menu.play","Play");

if(GetLang == "fr_FR")ModPE.langEdit("menu.play","Jouer");

ModPE.langEdit("menu.options","Options");

ModPE.langEdit("menu.skins","Skins");

}

function instaDestroy(){

	for(i = 0; i < 256; i++){

		Block.setDestroyTime(i, 0.1);

	}

}

function defaultDestroy(){

	for(i = 0; i < 256; i++){

		Block.setDestroyTime(i, defaultDestroyTime[i]);

	}

}

function modTick() {

var locker = 0;

var x = getPlayerX();

 var y = getPlayerY();

 var z = getPlayerZ();

  var et = getPlayerEnt();

  var entity = Entity.getAll();

	if(countDown>0){

		if(countDown != 101){

			countDown++;

		}

		else{

			startGame();

			countDown = 0;

		}

	}

	if(gameStarted == 1){

		if(getPlayerX()>gameX+0.5){

			if(getTile(gameX+6,gameY+1,gameZ-4) == 41){

				setTile(gameX+6,gameY+1,gameZ-4,0);

				setTile(gameX+6,gameY+5,gameZ-4,41);

			}

		}

		else if(getPlayerX()<gameX+0.5){

			if(getTile(gameX+6,gameY+5,gameZ-4) == 41){

				setTile(gameX+6,gameY+1,gameZ-4,41);

				setTile(gameX+6,gameY+5,gameZ-4,0);

			}

		}

		Entity.setPosition(getPlayerEnt(),gameX+0.5,getPlayerY(),gameZ+0.5);

		Entity.setRot(getPlayerEnt(),270,-15);
		
		if(count >= 5){

			updateGame();

			count = 0;

		}else if(count >= 4 && gameProgress>=100){

			updateGame();

			count = 0;

		}else if(count >= 3 && gameProgress>=200){

			updateGame();

			count = 0;

		}else if(count >= 2 && gameProgress>=300){

			updateGame();

			count = 0;

		}else if(count >= 1 && gameProgress>=500){

			updateGame();

			count = 0;

		}else count++;

	}

	if(aig > 0) {

		aig = aig - 1;

		for(ca=0; ca<=entity.length; ca++){

		if(Player.isPlayer(entity[ca]) == false){

		Entity.setVelY(entity[ca], 0.1);

			}

		}

	}

	if(superspeedmine) {

		Level.destroyBlock(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ());

	}

	if(allremove) {

		for(ca=0; ca<entity.length; ca++){

		if(entity[ca]!=et && Player.isPlayer(entity[ca]) == false){

		Entity.remove(entity[ca]);

			}

		}

	}

	if(supergodmode) {

		Player.setHealth(8000);

		Player.setHunger(8000);

	}

	if(stoptime) {

		if(locker>0) {

		locker = locker-1;

		} else {

		Level.setTime(locktime);

		locker = 20;

		}

	}

	if(jetpacked) {

		toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);

		var player = getPlayerEnt();

		setVelX(player, playerFlySpeed * playerDir[0]);

		setVelY(player, playerFlySpeed * playerDir[1]);

		setVelZ(player, playerFlySpeed * playerDir[2]);

	}

	if(alltps) {

		for(ca=0; ca<entity.length; ca++){

		Entity.setPosition(entity[ca], x, y, z);

		}

	}

	if(speeded) {

		if(s==1) {

Â Â Â Â Â Â Â Â Xpos = getPlayerX();

Â Â Â Â Â Â Â Â Zpos = getPlayerZ();

Â Â Â Â Â Â Â Â s = s + 1;

		}

		else if(s==3) {

Â Â Â Â Â Â Â Â s = 1;

Â Â Â Â Â Â Â Â Xdiff = getPlayerX()-Xpos;

Â Â Â Â Â Â Â Â Zdiff = getPlayerZ()-Zpos;

Â Â Â Â Â Â Â Â setVelX(getPlayerEnt(), Xdiff);

Â Â Â Â Â Â Â Â setVelZ(getPlayerEnt(), Zdiff);

Â Â Â Â Â Â Â Â Xdiff=0;

Â Â Â Â Â Â Â Â Zdiff=0;

		}

		if(s!=1) {

			s = s + 1;

		}

	}

	if(highjumps) {

		if(Entity.getVelY(getPlayerEnt())< -0.1) {

			setVelY(getPlayerEnt(),-0.5);

		}

		if(Entity.getVelY(getPlayerEnt())< 0.35 && Entity.getVelY(getPlayerEnt())> 0.2 && can==1 && canGetHP==1) {

			setVelY(getPlayerEnt(), 0.6);

			can = 2;

			HP = Entity.getHealth(getPlayerEnt());

			canGetHP = 0;

		}

		if(Entity.getVelY(getPlayerEnt())>gravity && can==2) {

			Player.setHealth(HP);

			canGetHP = 1;

			can = 0;

		}

		if(Entity.getVelY(getPlayerEnt())==gravity && can==0) {

			Player.setHealth(HP);

			canGetHP = 1;

			can = 1;

		}

	}

	if(freezeaura) {

	var mobs = Entity.getAll();

	for(var i = 0; i < mobs.length; i++) {

		var x = Entity.getX(mobs[i]) - getPlayerX();

		var y = Entity.getY(mobs[i]) - getPlayerY();

		var z = Entity.getZ(mobs[i]) - getPlayerZ();

		if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {

			Entity.setImmobile(mobs[i], true);

			}

		}

	}

	if(coords) {

		print("\nX:" + parseInt(getPlayerX()) + split + "Y:" + parseInt(getPlayerY()) + split + "Z:" + parseInt(getPlayerZ()));

	}

	if(derps) {

		var player = getPlayerEnt();

		var y = Math.floor(Entity.getYaw(player));

		var p = Math.floor(Entity.getPitch(player));

		Entity.setRot(player, y+3, p);

	}

	if(killaura) {

	var mobs = Entity.getAll();

	for(var i = 0; i < mobs.length; i++) {

		var x = Entity.getX(mobs[i]) - getPlayerX();

		var y = Entity.getY(mobs[i]) - getPlayerY();

		var z = Entity.getZ(mobs[i]) - getPlayerZ();

		if(x*x+y*y+z*z<=4*4 && mobs[i] != getPlayerEnt() && Entity.getEntityTypeId(mobs[i]) != EntityType.ARROW && Entity.getEntityTypeId(mobs[i]) != EntityType.BOAT && Entity.getEntityTypeId(mobs[i]) != EntityType.EGG && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_ORB && Entity.getEntityTypeId(mobs[i]) != EntityType.EXPERIENCE_POTION && Entity.getEntityTypeId(mobs[i]) != EntityType.FALLING_BLOCK && Entity.getEntityTypeId(mobs[i]) != EntityType.FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.FISHING_HOOK && Entity.getEntityTypeId(mobs[i]) != EntityType.ITEM && Entity.getEntityTypeId(mobs[i]) != EntityType.LIGHTNING_BOLT && Entity.getEntityTypeId(mobs[i]) != EntityType.MINECART && Entity.getEntityTypeId(mobs[i]) != EntityType.PAINTING && Entity.getEntityTypeId(mobs[i]) != EntityType.PRIMED_TNT && Entity.getEntityTypeId(mobs[i]) != EntityType.SMALL_FIREBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.SNOWBALL && Entity.getEntityTypeId(mobs[i]) != EntityType.THROWN_POTION) {

			Entity.setHealth(mobs[i], 0);

			}

		}

	}

	if(waterwalk) {

		if(Level.getTile(getPlayerX(), getPlayerY()-2, getPlayerZ())==8 || Level.getTile(getPlayerX(), getPlayerY()-2, getPlayerZ())==9 || Level.getTile(getPlayerX(), getPlayerY()-2, getPlayerZ())==10 || Level.getTile(getPlayerX(), getPlayerY()-2, getPlayerZ())==11) {

			setVelY(getPlayerEnt(), 0);

		}

	}

	if(nowalls) {

		Entity.setCollisionSize(getPlayerEnt(),0,0);

		if(Level.getTile(Player.getX(),Player.getY(), Player.getZ())!=0 && Level.getTile(Player.getX(),Player.getY()-1, Player.getZ())!=0) {

			setVelY(getPlayerEnt(), 0.01);

		}

	}

	if(climbs) {

		var PlayerX = parseInt(Player.getX());

		var PlayerY = parseInt(Player.getY());

		var PlayerZ = parseInt(Player.getZ());

		if(getTile(PlayerX+1, PlayerY, PlayerZ) !=0 
|| getTile(PlayerX-1, PlayerY, PlayerZ) !=0 
|| getTile(PlayerX, PlayerY, PlayerZ+1) !=0 
|| getTile(PlayerX, PlayerY, PlayerZ-1) !=0){

		if(Entity.getVelY(getPlayerEnt()) <= 0.6){

		setVelY(getPlayerEnt(), 0.6);

				}

			}

		}

	}

function toDirectionalVector(vector, yaw, pitch) {

	vector[0] = Math.cos(yaw) * Math.cos(pitch);

	vector[1] = Math.sin(pitch);

	vector[2] = Math.sin(yaw) * Math.cos(pitch);

}

function attackHook(attacker, victim) {

	if(instakilled) {

		Entity.setHealth(victim, 1);

	}

	if(saddle) {

		rideAnimal(getPlayerEnt(), victim);

	}

	if(knockbacks) {

		var XVel;

		var ZVel;

		var x;

		var z;

		if(getYaw() < 0){

			var hit = getYaw()+90;

			for(var go=0; hit<0; go++)

			{

				hit+= 360;

			}

			x = Math.cos(hit*(Math.PI/180));

			z = Math.sin(hit*(Math.PI/180));

			setVelX(victim, x*3);

			setVelY(victim, 1);

			setVelZ(victim, z*3);

		}

		else if(getYaw() > 0 && getYaw() < 360)

		{

			var hit = getYaw()+90;

			XVel = Math.cos(hit*(Math.PI/180));

			ZVel= Math.sin(hit*(Math.PI/180));

			setVelX(victim, XVel*3);

			setVelY(victim, 1);

			setVelZ(victim, ZVel*3);

		}

		else if(getYaw() >= 360)

		{

			var hit = getYaw()+90;

			for(go=0; hit>=360; go++)

			{

				hit -= 360;

			}

			XVel = Math.cos(hit*(Math.PI/180));

			ZVel = Math.sin(hit*(Math.PI/180));

			setVelX(victim, XVel*3);

			setVelY(victim, 1);

			setVelZ(victim, ZVel*3);

Â Â Â Â Â Â Â Â }

	}

}

function useItem(x, y, z, itemId, blockId, side) {

	if(spammer) {

		clientMessage("ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼ ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼ ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼ ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼");

		if(Server.getAddress() != null && Server.getPort() != null) {

			Server.sendChat("ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼ ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼ ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼ ï¼³ï¼°ï¼¡ï¼­ ï¼ï¼ï¼ï¼");

		}

	}

	if(nukers) {

		Level.setTile(x,y,z,0);

		Level.setTile(x,y-1,z,0);

		Level.setTile(x,y+1,z,0);

		Level.setTile(x+1,y,z,0);

		Level.setTile(x-1,y,z,0);

		Level.setTile(x,y,z+1,0);

		Level.setTile(x,y,z-1,0);

	}

	if(cbuilder) {

		Level.setTile(x,y,z,46);

		Level.setTile(x,y-1,z,46);

		Level.setTile(x,y+1,z,46);

		Level.setTile(x+1,y,z,46);

		Level.setTile(x-1,y,z,46);

		Level.setTile(x,y,z+1,46);

		Level.setTile(x,y,z-1,46);

	}

}

function destroyBlock(x, y, z, side){

Â Â Â Â var data = Level.getData(x, y, z);

Â Â Â Â var tile = Level.getTile(x, y, z);

Â Â Â Â if(stacked){

Â Â Â Â Â Â Â Â if(tile==1 && getCarriedItem()==270 || tile==1 && getCarriedItem()==257 || tile==1 && getCarriedItem()==274 || tile==1 && getCarriedItem()==278 || tile==1 && getCarriedItem()==285 || tile==4 && getCarriedItem()==270 || tile==4 && getCarriedItem()==257 || tile==4 && getCarriedItem()==274 || tile==4 && getCarriedItem()==278 || tile==4 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,4,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==1 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285 || tile==4 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,4,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==2 || tile==3){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,3,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==5 || tile==6 || tile==12 || tile==13){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63,data);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==14 && getCarriedItem()==257 || tile==14 && getCarriedItem()==278 || tile==14 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,14,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==14 && getCarriedItem()!=257 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,14,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==15 && getCarriedItem()==257 || tile==15 && getCarriedItem()==274 || tile==15 && getCarriedItem()==278 || tile==15 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,15,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==15 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,15,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==16 && getCarriedItem()==270 || tile==16 && getCarriedItem()==257 || tile==16 && getCarriedItem()==274 || tile==16 && getCarriedItem()==278 || tile==16 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,263,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==16 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,263,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==17){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,17,63,data);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==18 && getCarriedItem()==359){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,18,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==18 && getCarriedItem()!=359){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,18,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==19 || tile==20){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63,data);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==21 && getCarriedItem()==257 || tile==21 && getCarriedItem()==274 || tile==21 && getCarriedItem()==278 || tile==21 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,21,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==21 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,21,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==22 && getCarriedItem()==257 || tile==22 && getCarriedItem()==274 || tile==22 && getCarriedItem()==278 || tile==22 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,22,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==22 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,22,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==24 && getCarriedItem()==270 || tile==24 && getCarriedItem()==257 || tile==24 && getCarriedItem()==274 || tile==24 && getCarriedItem()==278 || tile==24 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,24,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==24 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,24,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==26){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,26,63,data);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==27 && getCarriedItem()==270 || tile==27 && getCarriedItem()==257 || tile==27 && getCarriedItem()==274 || tile==27 && getCarriedItem()==278 || tile==27 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,27,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==27 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,27,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==30 && getCarriedItem()==359){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,287,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==30 && getCarriedItem()!=359){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,287,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==31 && getCarriedItem()==359 || tile==32 & getCarriedItem()==359){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63,data);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==31 && getCarriedItem()!=359 || tile==32 && getCarriedItem()!=359){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,64,data);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==37 || tile==38 || tile==39 || tile==40){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==41 && getCarriedItem()==257 || tile==41 && getCarriedItem()==278 || tile==41 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,41,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==41 && getCarriedItem()!=257 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,41,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==42 && getCarriedItem()==257 || tile==42 && getCarriedItem()==274 || tile==42 && getCarriedItem()==278 || tile==42 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,42,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==42 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,42,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==44 && getCarriedItem()==257 || tile==44 && getCarriedItem()==270 || tile==44 && getCarriedItem()==274 || tile==44 && getCarriedItem()==278 || tile==44 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,44,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==44 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,44,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==45 && getCarriedItem()==270 || tile==45 && getCarriedItem()==257 || tile==45 && getCarriedItem()==274 || tile==45 && getCarriedItem()==278 || tile==45 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,45,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==45 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,45,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==47){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,340,61);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==48 && getCarriedItem()==270 || tile==48 && getCarriedItem()==257 || tile==48 && getCarriedItem()==274 || tile==48 && getCarriedItem()==278 || tile==48 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,48,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==48 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,48,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==49 && getCarriedItem()==278 || tile==246 && getCarriedItem()==278){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,49,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==49 && getCarriedItem()!=278 || tile==246 && getCarriedItem()!=278){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,49,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==50 || tile==53 || tile==54){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==56 && getCarriedItem()==257 || tile==57 && getCarriedItem()==257 || tile==56 && getCarriedItem()==278 || tile==57 && getCarriedItem()==278 || tile==56 && getCarriedItem()==285 || tile==57 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==56 && getCarriedItem()!=257 && getCarriedItem()!=278 && getCarriedItem()!=285 || tile==57 && getCarriedItem()!=257 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==61 && getCarriedItem()==270 || tile==61 && getCarriedItem()==257 || tile==61 && getCarriedItem()==274 || tile==61 && getCarriedItem()==278 || tile==61 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,61,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==61 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,61,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==63 || tile==64 || tile==65 || tile==66){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==67 && getCarriedItem()==270 || tile==67 && getCarriedItem()==257 || tile==67 && getCarriedItem()==274 || tile==67 && getCarriedItem()==278 || tile==67 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,67,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==67 && getCarriedItem()!=270 && getCarriedItem()!=257 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,67,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==73 && getCarriedItem()==257 || tile==73 && getCarriedItem()==278 || tile==73 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,331,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==73 && getCarriedItem()!=257 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,331,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==78 && getCarriedItem()==256 || tile==78 && getCarriedItem()==269 || tile==78 && getCarriedItem()==273 || tile==78 && getCarriedItem()==277 || tile==78 && getCarriedItem()==284){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,332,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==78 && getCarriedItem()!=256 && getCarriedItem()!=269 && getCarriedItem()!=273 && getCarriedItem()!=277 && getCarriedItem()!=284){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,332,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==80 && getCarriedItem()==256 || tile==80 && getCarriedItem()==269 || tile==80 && getCarriedItem()==273 || tile==80 && getCarriedItem()==277 || tile==80 && getCarriedItem()==284){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,332,60);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==80 && getCarriedItem()!=256 && getCarriedItem()!=269 && getCarriedItem()!=273 && getCarriedItem()!=277 && getCarriedItem()!=284){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,332,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==81 || tile==82 || tile==83 || tile==85 || tile==86 || tile==89 || tile==91 || tile==96 || tile==102 || tile==107){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==87 && getCarriedItem()==257 || tile==87 && getCarriedItem()==270 || tile==87 && getCarriedItem()==274 || tile==87 && getCarriedItem()==278 || tile==87 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,87,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==87 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,87,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==98 && getCarriedItem()==257 || tile==98 && getCarriedItem()==270 || tile==98 && getCarriedItem()==274 || tile==98 && getCarriedItem()==278 || tile==98 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,98,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==98 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,98,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==101 && getCarriedItem()==257 || tile==101 && getCarriedItem()==270 || tile==101 && getCarriedItem()==274 || tile==101 && getCarriedItem()==278 || tile==101 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,101,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==101 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,101,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==103){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,360,57);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==108 && getCarriedItem()==257 || tile==108 && getCarriedItem()==270 || tile==108 && getCarriedItem()==274 || tile==108 && getCarriedItem()==278 || tile==108 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,108,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==108 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,108,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==109 && getCarriedItem()==257 || tile==109 && getCarriedItem()==270 || tile==109 && getCarriedItem()==274 || tile==109 && getCarriedItem()==278 || tile==109 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,109,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==109 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,109,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==112 && getCarriedItem()==257 || tile==112 && getCarriedItem()==270 || tile==112 && getCarriedItem()==274 || tile==112 && getCarriedItem()==278 || tile==112 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,112,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==112 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,112,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==114 && getCarriedItem()==257 || tile==114 && getCarriedItem()==270 || tile==114 && getCarriedItem()==274 || tile==114 && getCarriedItem()==278 || tile==114 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,114,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==114 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,114,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==128 && getCarriedItem()==257 || tile==128 && getCarriedItem()==270 || tile==128 && getCarriedItem()==274 || tile==128 && getCarriedItem()==278 || tile==128 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,128,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==128 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,128,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==134 || tile==135 || tile==136 || tile==158 || tile==170 || tile==171 || tile==245 || tile==247){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,tile,63,data);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==139 && getCarriedItem()==257 || tile==139 && getCarriedItem()==270 || tile==139 && getCarriedItem()==274 || tile==139 && getCarriedItem()==278 || tile==139 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,139,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==139 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,139,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==155 && getCarriedItem()==257 || tile==155 && getCarriedItem()==270 || tile==155 && getCarriedItem()==274 || tile==155 && getCarriedItem()==278 || tile==155 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,155,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==155 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,155,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==156 && getCarriedItem()==257 || tile==156 && getCarriedItem()==270 || tile==156 && getCarriedItem()==274 || tile==156 && getCarriedItem()==278 || tile==156 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,156,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==156 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,156,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==173 && getCarriedItem()==257 || tile==173 && getCarriedItem()==270 || tile==173 && getCarriedItem()==274 || tile==173 && getCarriedItem()==278 || tile==173 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,173,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==173 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,173,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==244 && getCarriedItem()==257 || tile==244 && getCarriedItem()==270 || tile==244 && getCarriedItem()==274 || tile==244 && getCarriedItem()==278 || tile==244 && getCarriedItem()==285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,457,63);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â else if(tile==244 && getCarriedItem()!=257 && getCarriedItem()!=270 && getCarriedItem()!=274 && getCarriedItem()!=278 && getCarriedItem()!=285){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0.5,457,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â Â Â Â Â if(tile==250){

Â Â Â Â Â Â Â Â Â Â Â Â Level.dropItem(x,y,z,0,247,64);

Â Â Â Â Â Â Â Â }

Â Â Â Â }

}

function spawnHouse(){

setTile(Player.getX()+7, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()+4,17);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+7, Player.getY()+1, Player.getZ()-4,17);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()-4,17);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()-3,98);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()-2,98);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()-1,98);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()+1,98);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()+2,98);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()+3,98);

setTile(Player.getX()+7, Player.getY()+2, Player.getZ()+4,17);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()-4,17);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()-3,98);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()-2,102);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()-1,98);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()+1,98);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()+2,102);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()+3,98);

setTile(Player.getX()+7, Player.getY()+3, Player.getZ()+4,17);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()-4,17);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()-3,98);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()-2,98);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()-1,98);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ(),98);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()+1,98);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()+2,98);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()+3,98);

setTile(Player.getX()+7, Player.getY()+4, Player.getZ()+4,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()-4,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()-3,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()-2,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()-1,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ(),17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()+1,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()+2,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()+3,17);

setTile(Player.getX()+7, Player.getY()+5, Player.getZ()+4,17);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()+4,98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+9, Player.getY()+1, Player.getZ()-4,98);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()-4,98);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()+4,98);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()-4,98);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()+4,98);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()-4,98);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()+4,98);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()-4,98);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()+4,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()-4,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()+4,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()-3,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()+3,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()-2,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()+2,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()-1,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ()+1,98);

setTile(Player.getX()+9, Player.getY()+6, Player.getZ(),98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()+4,98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+10, Player.getY()+1, Player.getZ()-4,98);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()-4,98);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()+4,98);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()-4,98);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()+4,98);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()-4,98);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()+4,98);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()-4,98);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()+4,98);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()-4,98);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()+4,98);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()-3,17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()+3,17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()-2,17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()+2,17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()-1,17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()+1,17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ(),17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()-4,17);

setTile(Player.getX()+10, Player.getY()+7, Player.getZ()+4,17);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()+4,98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+11, Player.getY()+1, Player.getZ()-4,98);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()-4,98);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()+4,98);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()-4,98);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()+4,98);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()-4,98);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()+4,98);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()-4,98);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()+4,98);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ()-4,98);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ()+4,98);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()-3,17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()+3,17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()-2,17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()+2,17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()-1,17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()+1,17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ(),17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()-4,17);

setTile(Player.getX()+11, Player.getY()+7, Player.getZ()+4,17);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()+4,17);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+14, Player.getY()+1, Player.getZ()-4,17);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()-4,17);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()-3,98);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()-2,98);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()-1,98);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()+1,98);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()+2,98);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()+3,98);

setTile(Player.getX()+14, Player.getY()+2, Player.getZ()+4,17);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()-4,17);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()-3,98);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()-2,102);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()-1,98);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()+1,98);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()+2,102);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()+3,98);

setTile(Player.getX()+14, Player.getY()+3, Player.getZ()+4,17);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()-4,17);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()-3,98);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()-2,98);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()-1,98);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ(),98);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()+1,98);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()+2,98);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()+3,98);

setTile(Player.getX()+14, Player.getY()+4, Player.getZ()+4,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()-4,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()-3,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()-2,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()-1,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ(),17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()+1,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()+2,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()+3,17);

setTile(Player.getX()+14, Player.getY()+5, Player.getZ()+4,17);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()+4,98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+12, Player.getY()+1, Player.getZ()-4,98);

setTile(Player.getX()+12, Player.getY()+2, Player.getZ()-4,98);

setTile(Player.getX()+12, Player.getY()+2, Player.getZ()+4,98);

setTile(Player.getX()+12, Player.getY()+3, Player.getZ()-4,98);

setTile(Player.getX()+12, Player.getY()+3, Player.getZ()+4,98);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()-4,98);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()+4,98);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()-4,98);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()+4,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()-4,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()+4,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()-3,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()+3,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()-2,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()+2,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()-1,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ()+1,98);

setTile(Player.getX()+12, Player.getY()+6, Player.getZ(),98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()+4,98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+13, Player.getY()+1, Player.getZ()-4,98);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()-4,98);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()+4,98);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()-4,98);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()+4,98);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()-4,98);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()+4,98);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()-4,98);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()+4,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()-4,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()+4,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()-3,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()+3,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()-2,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()+2,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()-1,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ()+1,98);

setTile(Player.getX()+13, Player.getY()+6, Player.getZ(),98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ(),98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()+1,98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()+2,98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()+3,98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()+4,98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()-1,98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()-2,98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()-3,98);

setTile(Player.getX()+8, Player.getY()+1, Player.getZ()-4,98);

setTile(Player.getX()+8, Player.getY()+2, Player.getZ()-4,98);

setTile(Player.getX()+8, Player.getY()+2, Player.getZ()+4,98);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()-4,98);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()+4,98);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()-4,98);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()+4,98);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()-4,98);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()+4,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()-4,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()+4,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()-3,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()+3,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()-2,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()+2,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()-1,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ()+1,98);

setTile(Player.getX()+8, Player.getY()+6, Player.getZ(),98);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()+1,54);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()-1,54);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()+1,50);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()-1,50);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()-2,58);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()+2,58);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()-3,61);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ()+3,61);

setTile(Player.getX()+8, Player.getY()+2, Player.getZ(),0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ(),0);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ(),0);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ(),0);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ(),0);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ(),0);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()-1,0);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()-2,0);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()-3,0);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()+1,0);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()+2,0);

setTile(Player.getX()+9, Player.getY()+2, Player.getZ()+3,0);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()-1,0);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()-2,0);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()-3,0);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()+1,0);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()+2,0);

setTile(Player.getX()+9, Player.getY()+3, Player.getZ()+3,0);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()-1,0);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()-2,0);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()-3,0);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()+1,0);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()+2,0);

setTile(Player.getX()+9, Player.getY()+4, Player.getZ()+3,0);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()-1,0);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()-2,0);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()-3,0);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()+1,0);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()+2,0);

setTile(Player.getX()+9, Player.getY()+5, Player.getZ()+3,0);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()-1,0);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()-2,0);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()-3,0);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()+1,0);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()+2,0);

setTile(Player.getX()+10, Player.getY()+2, Player.getZ()+3,0);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()-1,0);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()-2,0);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()-3,0);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()+1,0);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()+2,0);

setTile(Player.getX()+10, Player.getY()+3, Player.getZ()+3,0);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()-1,0);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()-2,0);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()-3,0);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()+1,0);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()+2,0);

setTile(Player.getX()+10, Player.getY()+4, Player.getZ()+3,0);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()-1,0);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()-2,0);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()-3,0);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()+1,0);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()+2,0);

setTile(Player.getX()+10, Player.getY()+5, Player.getZ()+3,0);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()-1,0);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()-2,0);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()-3,0);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()+1,0);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()+2,0);

setTile(Player.getX()+10, Player.getY()+6, Player.getZ()+3,0);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()-1,0);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()-2,0);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()-3,0);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()+1,0);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()+2,0);

setTile(Player.getX()+11, Player.getY()+2, Player.getZ()+3,0);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()-1,0);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()-2,0);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()-3,0);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()+1,0);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()+2,0);

setTile(Player.getX()+11, Player.getY()+3, Player.getZ()+3,0);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()-1,0);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()-2,0);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()-3,0);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()+1,0);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()+2,0);

setTile(Player.getX()+11, Player.getY()+4, Player.getZ()+3,0);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()-1,0);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()-2,0);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()-3,0);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()+1,0);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()+2,0);

setTile(Player.getX()+11, Player.getY()+5, Player.getZ()+3,0);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ()-1,0);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ()-2,0);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ()-3,0);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ()+1,0);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ()+2,0);

setTile(Player.getX()+11, Player.getY()+6, Player.getZ(),0);

setTile(Player.getX()+12, Player.getY()+2, Player.getZ(),0);

setTile(Player.getX()+12, Player.getY()+3, Player.getZ(),0);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ(),0);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ(),0);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()-1,0);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()-1,0);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()-2,0);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()-2,0);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()-3,0);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()-3,0);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()+1,0);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()+1,0);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()+2,0);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()+2,0);

setTile(Player.getX()+12, Player.getY()+4, Player.getZ()+3,0);

setTile(Player.getX()+12, Player.getY()+5, Player.getZ()+3,0);

setTile(Player.getX()+12, Player.getY()+3, Player.getZ()+3,0);

setTile(Player.getX()+12, Player.getY()+3, Player.getZ()+2,0);

setTile(Player.getX()+12, Player.getY()+3, Player.getZ()-3,0);

setTile(Player.getX()+12, Player.getY()+3, Player.getZ()-2,0);

setTile(Player.getX()+13, Player.getY()+2, Player.getZ(),0);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ(),0);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ(),0);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ(),0);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()-1,0);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()-2,0);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()-3,0);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()+1,0);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()+2,0);

setTile(Player.getX()+13, Player.getY()+3, Player.getZ()+3,0);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()-1,0);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()-2,0);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()-3,0);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()+1,0);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()+2,0);

setTile(Player.getX()+13, Player.getY()+4, Player.getZ()+3,0);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()-1,0);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()-2,0);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()-3,0);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()+1,0);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()+2,0);

setTile(Player.getX()+13, Player.getY()+5, Player.getZ()+3,0);

setTile(Player.getX()+8, Player.getY()+2, Player.getZ(),0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ(),0);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ(),0);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ(),0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()-1,0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()-2,0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()-3,0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()+1,0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()+2,0);

setTile(Player.getX()+8, Player.getY()+3, Player.getZ()+3,0);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()-1,0);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()-2,0);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()-3,0);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()+1,0);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()+2,0);

setTile(Player.getX()+8, Player.getY()+4, Player.getZ()+3,0);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()-1,0);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()-2,0);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()-3,0);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()+1,0);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()+2,0);

setTile(Player.getX()+8, Player.getY()+5, Player.getZ()+3,0);

setTile(Player.getX()+3, Player.getY(), Player.getZ(),13);

setTile(Player.getX()+4, Player.getY(), Player.getZ(),13);

setTile(Player.getX()+5, Player.getY(), Player.getZ(),13);

setTile(Player.getX()+6, Player.getY(), Player.getZ(),13);

setTile(Player.getX()+7, Player.getY(), Player.getZ(),13);

setTile(Player.getX()+2, Player.getY(), Player.getZ()-1,13);

setTile(Player.getX()+3, Player.getY(), Player.getZ()-1,13);

setTile(Player.getX()+4, Player.getY(), Player.getZ()-1,13);

setTile(Player.getX()+5, Player.getY(), Player.getZ()-1,13);

setTile(Player.getX()+6, Player.getY(), Player.getZ()-1,13);

setTile(Player.getX()+7, Player.getY(), Player.getZ()-1,13);

setTile(Player.getX()+2, Player.getY(), Player.getZ()+1,13);

setTile(Player.getX()+3, Player.getY(), Player.getZ()+1,13);

setTile(Player.getX()+4, Player.getY(), Player.getZ()+1,13);

setTile(Player.getX()+5, Player.getY(), Player.getZ()+1,13);

setTile(Player.getX()+6, Player.getY(), Player.getZ()+1,13);

setTile(Player.getX()+7, Player.getY(), Player.getZ()+1,13);

setTile(Player.getX()+6, Player.getY()+1, Player.getZ(),109);

setTile(Player.getX()+2, Player.getY(), Player.getZ(),13);

Level.setChestSlot(Player.getX()+13, Player.getY()+2, Player.getZ()+1, 1, 324, 0, 2);

Level.setChestSlot(Player.getX()+13, Player.getY()+2, Player.getZ()+1, 2, 17, 0, 64);

Level.setChestSlot(Player.getX()+13, Player.getY()+2, Player.getZ()-1, 1, 126, 0, 2);

Level.setChestSlot(Player.getX()+13, Player.getY()+2, Player.getZ()-1, 2, 355, 0, 2);

}

/*JavaScript made by wilco375*/

function generateGame(){
	var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();     
 	activity.runOnUiThread(new java.lang.Runnable({ run: function() { 
 		try{ 
 			while(topBlocks.length < 5000){
				if(!separate()){
					if(topBlocks.length==0) var isTop = true
					else var isTop = onTop();
					for(i=0;i<=random(5,15);i++){
						if(isTop){
							topBlocks.push("1");
							bottomBlocks.push("0");
						} 
						else{
							bottomBlocks.push("1");
							topBlocks.push("0");
						} 
					}
					for(i=0;i<=random(3,6);i++){
						topBlocks.push("0");
						bottomBlocks.push("0");
					}
				}else{
					if(topBlocks.length==0) var currentTop = true
					else var currentTop = onTop();
					for(i=0;i<=random(5,15);i++){
						if(currentTop){
							topBlocks.push("1");
							bottomBlocks.push("0");
						}else{
							topBlocks.push("0");
							bottomBlocks.push("1");
						}
						for(i=0;i<=random(3,5);i++){
							topBlocks.push("0");
							bottomBlocks.push("0");
						}
						var randomNr = random(1,5);
						if(randomNr == 1 || randomNr == 2)  currentTop = !currentTop
					}
				}
			}
 		}catch(error){ 
 			Toast.makeText(ctx, error, 1).show(); 
 		} 
 	}})); 
} 

function startGame(){
	gameProgress = 0;
	gameStarted = 1;
	gameX = Math.floor(Player.getX());
	gameY = Math.round(Player.getY());
	gameY = gameY-2;
	gameZ = Math.floor(Player.getZ());
	Entity.setPosition(getPlayerEnt(),gameX+0.5,getPlayerY(),gameZ+0.5);
	Entity.setRot(getPlayerEnt(),270,-15);
	for(i = gameZ-7;i<=gameZ+7;i++){
		for(j = gameY;j<=gameY+6;j++){
			setTile(gameX+7,j,i,49);
		}
	}
	for(i = gameZ-7;i<=gameZ+7;i++){
		setTile(gameX+6,gameY,i,1);
		setTile(gameX+6,gameY+6,i,1);
	}
	for(j = gameY;j<=gameY+6;j++){
		setTile(gameX+6,j,gameZ+7,1);
		setTile(gameX+6,j,gameZ-7,1);
	}
	setTile(gameX+6,gameY+1,gameZ-4,41);
	updateGame();
}

function updateGame(){
	if(gameProgress+7>=5000){
		gameProgress = 5004;
	}
	for(i=gameProgress-6;i<=gameProgress+6;i++){
		if(i>=0){
			if(bottomBlocks[i]=="1"){
				if(getTile(gameX+6,gameY+1,gameZ+i-gameProgress) == 41) resetGame();
				else{
					setTile(gameX+6,gameY+2,gameZ+i-gameProgress,1);
					setTile(gameX+6,gameY+1,gameZ+i-gameProgress,1);
				}
			}else{
				if(getTile(gameX+6,gameY+2,gameZ+i-gameProgress) != 41) setTile(gameX+6,gameY+2,gameZ+i-gameProgress,0);
				if(getTile(gameX+6,gameY+1,gameZ+i-gameProgress) != 41) setTile(gameX+6,gameY+1,gameZ+i-gameProgress,0);
			}
			if(topBlocks[i]=="1"){
				if(getTile(gameX+6,gameY+5,gameZ+i-gameProgress) == 41) resetGame();
				else{
					setTile(gameX+6,gameY+4,gameZ+i-gameProgress,1);
					setTile(gameX+6,gameY+5,gameZ+i-gameProgress,1);
				}
			}else{
				if(getTile(gameX+6,gameY+4,gameZ+i-gameProgress) != 41) setTile(gameX+6,gameY+4,gameZ+i-gameProgress,0);
				if(getTile(gameX+6,gameY+5,gameZ+i-gameProgress) != 41) setTile(gameX+6,gameY+5,gameZ+i-gameProgress,0);
			}
		}
	}
	gameProgress++;
}

function resetGame(){
	if(gameProgress-4 == 5000) clientMessage("Score maximun")
	else clientMessage("Score :" + split + (gameProgress-4));
	gameProgress = 0;
	gameStarted = 0;
	topBlocks = [];
	bottomBlocks = [];
	generateGame();
	
	var activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();     
 	activity.runOnUiThread(new java.lang.Runnable({ run: function() { 
 		try{ 
			for(x = gameX+6;x<=gameX+7;x++){
				for(y = gameY;y<=gameY+6;y++){
					for(z = gameZ-7;z<=gameZ+7;z++){
						setTile(x,y,z,0);
					}
				}
			}
 		}catch(error){ 
 			Toast.makeText(ctx, error, 1).show(); 
 		} 
 	}})); 
}

function random(first,last){
	if(first > last){
		var temp = last;
		last = first;
		first = temp;
	}
	return Math.floor((Math.random() * last) + first); 
}

function onTop(){
	if(random(0,1) == 0){
		return true;
	}else{
		return false;
	} 
}

function separate(){
	if(random(0,4) == 0){
		return false;
	}else{
		return true;
	}
}